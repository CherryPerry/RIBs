buildscript {
    dependencies {
        classpath deps.build.intellijPlugin
    }
}

apply plugin: "kotlin"
apply plugin: "maven"
apply plugin: "org.jetbrains.intellij"
apply plugin: "templates-generator"

group "com.badoo.ribs"

repositories {
    mavenLocal()
}

templates {
    template {
        id = 'rib_with_view'
        name = 'RIB with view'

        fromProject = project(':templates')
        sourcePackage = 'com.badoo.ribs.template.rib_with_view'
        modulePackage = 'com.badoo.ribs.template'
        resources = ['rib_foo_bar.xml']

        token {
            id = "rib_name"
            name = "RIB name"
            sourceValue = "FooBar"
        }
    }
}

dependencies {
    implementation deps.build.commonsLang
    implementation deps.support.annotations
    implementation deps.external.kotlinStdlib
    implementation deps.external.apacheCommons
    implementation deps.external.gson

    testImplementation deps.test.junit
    testImplementation deps.test.assertj
    testImplementation deps.test.mockitoKotlin
}

// Determines if the machine has Maven credentials.
def hasMavenCredentials() {
    return ext.mavenUser && ext.mavenPassword
}

// Determines if it is a release build.
static def isReleaseBuild() {
    return System.env.ENABLE_RELEASE_BUILD == "true"
}

ext.pluginXml = new XmlSlurper().parse(file("src/main/resources/META-INF/plugin.xml"))
version = pluginXml.version

intellij {
    plugins = ['android']
    version = deps.versions.intellij
    pluginName "UberRIBPresidioPlugin"
    updateSinceUntilBuild false
    sandboxDirectory "${project.gradle.gradleHomeDir}/caches/intellij"
    downloadSources true

    // Uncomment to test against Android Studio
    // alternativeIdePath = '/Applications/Android Studio.app'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

afterEvaluate {
    artifacts {
        archives sourcesJar
        archives project.tasks.getByName("buildPlugin")
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository url: "file://" + new File(System.getProperty("user.home"), ".m2/repository").absolutePath
            if (isReleaseBuild() && hasMavenCredentials()) {
                repository(url: "${config.build.artifactoryUrl}/${pluginsMavenRepositoryBucket}") {
                    authentication(userName: mavenUser, password: mavenPassword)
                }
            }
        }
    }
}
build.dependsOn uploadArchives
